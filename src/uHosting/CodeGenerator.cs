using System;
using System.IO;
using System.Linq;
using System.Xml.Schema;
using Microsoft.Extensions.DependencyInjection;

namespace uHosting
{
    public static class CodeGenerator
    {
        internal static void GenerateFactories(StringWriter output, ServiceCollection services)
        {
            var writer = new Indentinator(output);
            writer.WriteLine("// This code was generated by a Pranav.");
            writer.WriteLine();
            writer.WriteLine("internal static class __DI_Factories");
            writer.WriteLine("{");

            writer.Indent();
            foreach (var service in services)
            {
                WriteService(writer, service);
            }
            writer.Dedent();

            writer.WriteLine("}");
        }

        private static string WriteService(Indentinator writer, Microsoft.Extensions.DependencyInjection.ServiceDescriptor service)
        {
            if(service.ImplementationType != null)
            {
                var ctor = service.ImplementationType.GetConstructors()
                    .Where(c => c.IsPublic)
                    .OrderByDescending(c => c.GetParameters().Length)
                    .FirstOrDefault();

                if(ctor == null)
                {
                    writer.WriteLine($"#error Unable to find an appropriate constructor for {service.ImplementationType}");
                    return null;
                }

                var factoryId = Guid.NewGuid().ToString("N");
                writer.WriteLine($"private static object Factory{factoryId}(System.IServiceProvider services)");
                writer.WriteLine("{");
                writer.Indent();
                var parameters = ctor.GetParameters();
                foreach(var parameter in parameters)
                {
                    writer.WriteLine($"var {parameter.Name} = services.GetService<{parameter.ParameterType.FullName}>() ?? throw new Exception(\"Nope\");");
                }
                writer.WriteLine($"return new {service.ImplementationType.FullName}({string.Join(",", parameters.Select(p => p.Name))});");
                writer.Dedent();
                writer.WriteLine("}");
                return factoryId;
            }
            return null;
        }

        private static void WriteHeader(Indentinator writer)
        {
        }

        private class Indentinator
        {
            private TextWriter _writer;
            private int _indent;

            public Indentinator(TextWriter writer)
            {
                _writer = writer;
                _indent = 0;
            }

            public void Indent()
            {
                _indent += 1;
            }

            public void Dedent()
            {
                _indent -= 1;
            }

            public void WriteLine(string val = null)
            {
                if (string.IsNullOrEmpty(val))
                {
                    _writer.WriteLine();
                }
                else
                {
                    var indentation = new string(' ', _indent * 4);
                    _writer.WriteLine($"{indentation}{val}");
                }
            }
        }
    }
}